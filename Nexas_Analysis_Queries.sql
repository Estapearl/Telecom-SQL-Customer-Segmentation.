/********************************************************************
02_Analysis_Queries.sql
Purpose: Contains SQL queries that answer NexaSat's key business 
         questions across four focus areas:
         - Revenue Analysis: Understand where revenue comes from 
           (total, by CLV segments, plan type, ARPU, etc.)
         - Segment Profiling: Profile customer segments by plan type, 
           plan level, service usage, and ARPU
         - Upselling Opportunities: Identify customers who can be upgraded 
           (e.g., Basic → Premium) to boost ARPU
         - Cross-Selling Opportunities: Identify customers who can be 
           offered add-on services (Tech Support, Multiple Lines) to 
           increase stickiness and wallet share
         
These queries directly support NexaSat’s business goals of:
- Maximizing customer lifetime value (CLV)
- Reducing churn risk in low-value segments
- Driving growth through targeted marketing strategies

Author: Kasham Esther Bature
Date: 16th September 2025
********************************************************************/


------------------------------------------------
-- SECTION 1: REVENUE ANALYSIS
------------------------------------------------

-- 1. Total revenue from all existing users
-- Purpose: Understand overall revenue generated by active customers
SELECT 
    ROUND(SUM(Monthly_Bill_Amount * Tenure_Months), 2) AS Total_Revenue
FROM existing_users;

-- 2. Revenue by CLV Segment
-- Purpose: Identify which customer segments contribute the most revenue
SELECT 
    CLV_Segment,
    ROUND(SUM(Monthly_Bill_Amount * Tenure_Months), 2) AS Total_Revenue,
    COUNT(Customer_ID) AS Customer_Count
FROM existing_users
GROUP BY CLV_Segment
ORDER BY Total_Revenue DESC;

-- 3. Revenue breakdown by Plan Type and Plan Level
-- Purpose: Identify which plan types and levels drive the most revenue
SELECT 
    Plan_Type, 
    Plan_Level,
    ROUND(SUM(Monthly_Bill_Amount * Tenure_Months), 2) AS Total_Revenue,
    COUNT(Customer_ID) AS Customer_Count
FROM existing_users
GROUP BY Plan_Type, Plan_Level
ORDER BY Total_Revenue DESC;

-- 4. ARPU (Average Revenue per User) overall
-- Purpose: Calculate how much revenue, on average, each customer contributes
SELECT 
    ROUND(SUM(Monthly_Bill_Amount * Tenure_Months) * 1.0 / COUNT(Customer_ID), 2) AS ARPU
FROM existing_users;

-- 5. ARPU by CLV Segment
-- Purpose: Understand profitability per segment
SELECT 
    CLV_Segment,
    ROUND(SUM(Monthly_Bill_Amount * Tenure_Months) * 1.0 / COUNT(Customer_ID), 2) AS ARPU,
    COUNT(Customer_ID) AS Customer_Count
FROM existing_users
GROUP BY CLV_Segment
ORDER BY ARPU DESC;

-- 6. Revenue breakdown by Multiple Lines and Tech Support
-- Purpose: Identify upsell/cross-sell opportunities within segments
SELECT 
    CLV_Segment, 
    Multiple_Lines, 
    Tech_Support,
    COUNT(*) AS Customer_Count,
    ROUND(SUM(Monthly_Bill_Amount * Tenure_Months), 2) AS Total_Revenue
FROM existing_users
GROUP BY CLV_Segment, Multiple_Lines, Tech_Support
ORDER BY CLV_Segment, Total_Revenue DESC;


------------------------------------------------
-- SECTION 2: SEGMENT PROFILING
------------------------------------------------

-- 1. Number of customers in each CLV segment
-- Purpose: Understand the size of each segment
SELECT CLV_Segment, COUNT(*) AS Customer_Count
FROM existing_users
GROUP BY CLV_Segment
ORDER BY Customer_Count DESC;

-- 2. Distribution of Plan Level (Basic/Premium) within each CLV segment
-- Purpose: See how customer spending tiers relate to CLV segments
SELECT 
    CLV_Segment,
    Plan_Level,
    COUNT(*) AS Customer_Count
FROM existing_users
GROUP BY CLV_Segment, Plan_Level
ORDER BY CLV_Segment, Customer_Count DESC;

-- 3. Distribution of Plan Type (Prepaid/Postpaid) within each CLV segment
-- Purpose: Identify which CLV segments prefer specific plan types
SELECT 
    CLV_Segment,
    Plan_Type,
    COUNT(*) AS Customer_Count
FROM existing_users
GROUP BY CLV_Segment, Plan_Type
ORDER BY CLV_Segment, Customer_Count DESC;

-- 4. Multiple Lines, Tech Support, and Revenue by segment
-- Purpose: Examine service usage and revenue contribution per segment
SELECT 
    CLV_Segment,
    Multiple_Lines,
    Tech_Support,
    COUNT(*) AS Customer_Count,
    ROUND(SUM(Monthly_Bill_Amount * Tenure_Months), 2) AS Total_Revenue
FROM existing_users
GROUP BY CLV_Segment, Multiple_Lines, Tech_Support
ORDER BY CLV_Segment, Total_Revenue DESC;

-- 5. ARPU overall (benchmark)
SELECT 
    ROUND(SUM(Monthly_Bill_Amount * Tenure_Months) * 1.0 / COUNT(Customer_ID), 2) AS ARPU
FROM existing_users;

-- 6. ARPU by CLV Segment
SELECT 
    CLV_Segment,
    ROUND(SUM(Monthly_Bill_Amount * Tenure_Months) * 1.0 / COUNT(Customer_ID), 2) AS ARPU,
    COUNT(CLV_Segment) AS Customer_Count
FROM existing_users
GROUP BY CLV_Segment
ORDER BY ARPU DESC;


------------------------------------------------
-- SECTION 3: UPSELLING OPPORTUNITIES
------------------------------------------------

-- 1. Medium CLV customers still on Basic plan
-- Business Case: Upsell to Premium plan to increase revenue and ARPU
SELECT 
    COUNT(Customer_ID) AS Target_Customers,
    ROUND(SUM(Monthly_Bill_Amount * Tenure_Months), 2) AS Current_Revenue,
    ROUND(AVG(Monthly_Bill_Amount), 2) AS Avg_Monthly_Bill
FROM existing_users
WHERE CLV_Segment = 'Medium'
  AND Plan_Level = 'Basic';

-- 2. Detailed upsell analysis for Medium CLV customers on Basic
-- Business Case: Quantify potential impact of upgrading to Premium
SELECT 
    CLV_Segment,
    Plan_Level,
    COUNT(Customer_ID) AS Customer_Count,
    ROUND(SUM(Monthly_Bill_Amount * Tenure_Months), 2) AS Total_Revenue,
    ROUND(AVG(Monthly_Bill_Amount), 2) AS Avg_Monthly_Bill
FROM existing_users
WHERE CLV_Segment = 'Medium'
  AND Plan_Level = 'Basic'
GROUP BY CLV_Segment, Plan_Level;


------------------------------------------------
-- SECTION 4: CROSS-SELLING OPPORTUNITIES
------------------------------------------------

-- 1. Senior Citizens with no dependents, Low CLV, no Tech Support
-- Business Case: Offer Tech Support to increase perceived value & reduce churn
SELECT 
    COUNT(Customer_ID) AS Potential_Customers
FROM existing_users
WHERE Senior_Citizen = 1
  AND Dependents = '0'
  AND Tech_Support = '0'
  AND CLV_Segment = 'Low';

-- 2. Low and Medium CLV customers on Basic plan
-- Business Case: Cross-sell Premium features to increase ARPU
SELECT 
    CLV_Segment,
    COUNT(Customer_ID) AS Potential_Customers,
    ROUND(SUM(Monthly_Bill_Amount * Tenure_Months), 2) AS Current_Revenue
FROM existing_users
WHERE Plan_Level = 'Basic'
  AND CLV_Segment IN ('Low', 'Medium')
GROUP BY CLV_Segment
ORDER BY Current_Revenue DESC;

-- 3. Medium CLV customers with a single line
-- Business Case: Cross-sell family/multi-line plans to boost retention & revenue
SELECT 
    COUNT(Customer_ID) AS Potential_Customers,
    ROUND(SUM(Monthly_Bill_Amount * Tenure_Months), 2) AS Current_Revenue,
    ROUND(AVG(Monthly_Bill_Amount), 2) AS Avg_Monthly_Spend
FROM existing_users
WHERE Multiple_Lines = '0'
  AND CLV_Segment = 'Medium';

-- 4. Low CLV customers with no add-on services
-- Business Case: Bundle add-ons (Tech Support + Multiple Lines) to improve stickiness
SELECT 
    COUNT(Customer_ID) AS Potential_Customers
FROM existing_users
WHERE CLV_Segment = 'Low'
  AND Tech_Support = '0'
  AND Multiple_Lines = '0';
